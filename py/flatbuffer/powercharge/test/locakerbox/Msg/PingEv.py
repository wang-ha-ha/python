# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Msg

import flatbuffers

class PingEv(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPingEv(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PingEv()
        x.Init(buf, n + offset)
        return x

    # PingEv
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PingEv
    def Temp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PingEv
    def Signal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PingEv
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .GPS import GPS
            obj = GPS()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PingEvStart(builder): builder.StartObject(3)
def PingEvAddTemp(builder, temp): builder.PrependFloat32Slot(0, temp, 0.0)
def PingEvAddSignal(builder, signal): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(signal), 0)
def PingEvAddPos(builder, pos): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def PingEvEnd(builder): return builder.EndObject()
